# ===== RAILWAY PRODUCTION ENVIRONMENT VARIABLES =====
# Copy these variables to your Railway Django service

# Django Core
DEBUG=False
SECRET_KEY=your_generated_secret_key_here

# Database (Railway will provide this automatically)
DATABASE_URL=${{ Postgres.DATABASE_URL }}

# Cloudinary Configuration
CLOUDINARY_CLOUD_NAME=your_cloudinary_cloud_name
CLOUDINARY_API_KEY=your_cloudinary_api_key
CLOUDINARY_API_SECRET=your_cloudinary_api_secret

# Stripe Configuration
STRIPE_PUBLIC_KEY=pk_test_51QGiLACjjINSxum8mgiNaJtTPCZMdY322Xvnax5aT3obD5GYdODdLCFXCj8KXGhU1VPeqDJMaVdzrCfTptXvhees00ysZwF3dC
STRIPE_SECRET_KEY=sk_test_51QGiLACjjINSxumWtNIKOF2N8ehyhViA75ngD2zp0B8EaNjwA6mMjhDU8tfIqqnJe1hJHNEqHJKfWp3KD7kGTKr00FVyTiEfy

# Email Configuration
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=test@example.com
EMAIL_HOST_PASSWORD=testpassword

# Mailgun Configuration
MAILGUN_API_KEY=test_mailgun_key
MAILGUN_DOMAIN=test.mailgun.org
MAILGUN_SENDER_DOMAIN=test.mailgun.org

# AWS S3 Configuration (if needed)
AWS_ACCESS_KEY_ID=test_access_key
AWS_SECRET_ACCESS_KEY=test_secret_key
AWS_STORAGE_BUCKET_NAME=test-bucket
AWS_S3_REGION_NAME=us-east-1

# CORS and Security
ALLOWED_HOSTS=.railway.app,localhost,127.0.0.1,0.0.0.0
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,https://your-frontend-domain.vercel.app

# Railway Start Command (set this in Railway variables)
START_COMMAND=python manage.py migrate --fake-initial && gunicorn backend.wsgi:application --bind 0.0.0.0:$PORT

# ===== IMPORTANT NOTES =====
# 1. Replace 'your_cloudinary_*' with your actual Cloudinary credentials
# 2. Replace 'your_generated_secret_key_here' with a secure secret key
# 3. Update CORS_ALLOWED_ORIGINS with your actual frontend domain
# 4. The DATABASE_URL will be automatically provided by Railway
# 5. Set DEBUG=False for production
